import path from 'path';
import rtlcss from 'rtlcss';
import webpack from 'webpack';

const isWebpack5 = parseInt(webpack.version, 10) === 5;

const cssOnly = filename => path.extname(filename) === '.css';

class RtlCssPlugin {
  constructor(options) {
    if (typeof options === 'string') {
      options = {
        filename: options,
      };
    }
    this.options = options || {
      filename: '[name].rtl.css',
    };
  }

  processAssets = (compilation, callback) => {
    // webpack 5 turned this from an array to a set
    const chunks = isWebpack5
      ? Array.from(compilation.chunks)
      : compilation.chunks;

    // Explore each chunk (build output):
    chunks.forEach(chunk => {
      // Explore each asset filename generated by the chunk:
      // webpack 5 turned this from an array to a set
      const files = isWebpack5 ? Array.from(chunk.files) : chunk.files;

      files.filter(cssOnly).forEach(filename => {
        // Get the asset source for each file generated by the chunk:
        const src = compilation.assets[filename].source();
        const dst = rtlcss.process(src);
        const dstFileName = compilation.getPath(this.options.filename, {
          chunk,
          cssFileName: filename,
        });

        if (isWebpack5) {
          compilation.assets[dstFileName] = new webpack.sources.RawSource(dst);
          chunk.files.add(dstFileName);
        } else {
          compilation.assets[dstFileName] = {
            source() {
              return dst;
            },
            size() {
              return dst.length;
            },
          };

          chunk.files.push(dstFileName);
        }
      });
    });

    callback();
  };

  apply(compiler) {
    if (isWebpack5) {
      compiler.hooks.compilation.tap('RtlCssPlugin', compilation => {
        compilation.hooks.processAssets.tapAsync(
          {
            name: 'TPAStylePlugin.pluginName',
            stage: compilation.PROCESS_ASSETS_STAGE_OPTIMIZE,
          },
          (chunks, callback) => this.processAssets(compilation, callback),
        );
      });
    } else {
      compiler.hooks.emit.tapAsync('RtlCssPlugin', this.processAssets);
    }
  }
}

module.exports = RtlCssPlugin;
